#!/usr/bin/env node

const { app, BrowserWindow, ipcMain } = require("electron");
const fs = require("file-system");
const fetch = require("node-fetch");
const path = require("path");
let mainWindow;
const ps = require("ps-node");

function rimraf(dir_path) {
  if (fs.existsSync(dir_path)) {
    fs.readdirSync(dir_path).forEach(function(entry) {
      var entry_path = path.join(dir_path, entry);
      if (fs.lstatSync(entry_path).isDirectory()) {
        rimraf(entry_path);
      } else {
        fs.unlinkSync(entry_path);
      }
    });
    fs.rmdirSync(dir_path);
  }
}

fs.readdir(path.join(__dirname, "events"), function(err, folders) {
  folders.forEach(folder => {
    fs.readdir(path.join(__dirname, "events", folder), function(err, files) {
      files.forEach(file => {
        let name = file.split(".")[0];
        ipcMain.on(name, function() {
          require(path.join(__dirname, "events", folder, file))(mainWindow);
        });
      });
    });
  });
});

function createWindow() {
  mainWindow = new BrowserWindow({
    width: 1400,
    height: 700,
    webPreferences: {
      nodeIntegration: true
    },
    frame: false,
    titleBarStyle: "hiddenInset"
  });

  mainWindow.loadFile(path.resolve(__dirname + "/web/index.html"));
  mainWindow.on("closed", function() {
    mainWindow = null;
  });
  ipcMain.on("end_spruce", function(cb) {
    ps.lookup({ command: "spruce" }, function(err, results) {
      if (results[0] && results[0].command == "spruce") {
        process.kill(results[0].pid);
        console.log("ended");
        console.log(cb);
        if (typeof cb == "function") cb();
      }
    });
  });
  ipcMain.on("check_update", function() {
    let available = true;
    try {
      fs.readFileSync(pathJoin(__dirname + "/.spruce/bin/www"));
    } catch (err) {
      available = false;
    }
    if (!available) return;
    const version = require(pathJoin(__dirname + "/.spruce/package.json"))
      .version;
    fetch(
      "https://raw.githubusercontent.com/dan-divy/spruce/project-oak/package.json"
    )
      .then(res => res.json())
      .then(body => {
        if (body.version != version) {
          mainWindow.webContents.send("update", body.version);
        } else {
          mainWindow.webContents.send("update", false);
        }
      });
  });
  ipcMain.on("run_update", function() {
    try {
      rimraf(pathJoin(__dirname + "/.spruce/"));
      console.log("Done delete");
      ipcMain.emit("end_spruce", function() {
        ipcMain.emit("start_spruce");
      });
    } catch (err) {
      console.error(err);
      mainWindow.webContents.send("progress-error", err.toString());
      return;
    }
  });
}

app.on("ready", createWindow);

app.on("window-all-closed", function() {
  if (process.platform !== "darwin") app.quit();
});

app.on("activate", function() {
  if (mainWindow === null) createWindow();
});
