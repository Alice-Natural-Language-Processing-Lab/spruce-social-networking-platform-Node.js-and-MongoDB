#!/usr/bin/env node

/**
 * Module dependencies.
 */
const app = require('../app');
const debug = require('debug')('spruce:server');
const http = require('http');
const nconf = require('nconf');
nconf
  .argv()
  .env('__')
  .defaults({
    conf: `${__dirname}/../config.json`,
    'NODE_ENV': 'development'
  });
nconf.file(nconf.get('conf'));

/**
 * Get port from environment and store in Express.
 */
const port = app.get('port') || nconf.get('port') || 3000;

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Include Socket.IO.
 */
const options = {
  /* Server capture path */
  //path: '/socket.io',
  /* Serve client files */
  //serveClient: false,
  /* below are engine.IO options */
  /* how many ms without a pong packet to consider the connection closed */
  //pingTimeout: 5000,
  /* how many ms before sending a new ping packet */
  //pingInterval: 25000,
  /* how many ms before an uncompleted transport upgrade is cancelled */
  //upgradeTimeout: 10000,
  // name of the HTTP cookie that contains the client sid to send as part of handshake response headers. Set to false to not send one. */
  cookie: false,
  /*transports to allow connections to */
  transports: ['websocket']
};
const io = require('socket.io')(server, options);

require('../namespace/chat')(nconf.get(), io);
require('../namespace/notification')(nconf.get(), io);
app.set('notifNsp', io.of('notification'));

/**
 * Listen on provided port, on all network interfaces.
 */
if (app.get('env') == 'development') console.log('Running in development mode.');
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.log(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.log(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('Listening on ' + bind);
}
